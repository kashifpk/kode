"""Parse nmap xml result into python dict that is json serializable."""

from typing import OrderedDict
import xmltodict
from copy import deepcopy

from ..util.dict_list_tools import d_key_path_exists


def clean_dict(d_in: dict) -> dict:
    """Converts OrderedDict to a new dict which has keynames normalized by removing @ character from it."""
    d_out = {}
    for k, v in d_in.items():
        new_k = k
        new_v = deepcopy(v)

        if k.startswith('@'):
            new_k = k[1:]

        if isinstance(v, (dict, OrderedDict)):
            new_v = clean_dict(new_v)

        d_out[new_k] = new_v

    return d_out


def format_sfp_str(s_in: str) -> str:
    """Make nmap service fingerprint string more readable."""
    return s_in.replace('\\x20',
                        ' ').replace('\\x04',
                                     '\t').replace('\\.',
                                                   '.').replace('%r', '\n')


class NMapParser:
    def parse(self, xml_str: str) -> dict:
        result = {}
        r = xmltodict.parse(xml_str)

        r_address = r['nmaprun']['host']['address']
        if isinstance(r_address, dict):
            result['address'] = clean_dict(r_address)
        elif isinstance(r_address, (list, tuple)):
            result['address'] = [clean_dict(r) for r in r_address]

        # Hostnames section
        hostnames = []
        exists, r_hostnames = d_key_path_exists(
            ['nmaprun', 'host', 'hostnames', 'hostname'], r)
        if exists:
            for hn in r_hostnames:
                hostnames.append(clean_dict(hn))

        result['hostnames'] = hostnames

        # Ports section
        ports = []
        exists, r_ports = d_key_path_exists(
            ['nmaprun', 'host', 'ports', 'port'], r)
        if exists:
            for p_dict in r_ports:
                # if we have service fingerprint string, clean it.
                if 'service' in p_dict and '@servicefp' in p_dict['service']:
                    p_dict['service']['@servicefp'] = format_sfp_str(
                        p_dict['service']['@servicefp'])

                ports.append(clean_dict(p_dict))

        result['ports'] = ports

        # OS secttion
        os = {}
        _, os_name = d_key_path_exists(
            ['nmaprun', 'host', 'os', 'osmatch', '@name'], r)
        exists, os_dict = d_key_path_exists(
            ['nmaprun', 'host', 'os', 'osmatch', 'osclass'], r)

        if exists:
            os = clean_dict(os_dict)
            os['name'] = os_name

        result['os'] = os

        return result
