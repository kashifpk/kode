"""Parse nmap xml result into python dict that is json serializable."""

from typing import OrderedDict
import xmltodict
from copy import deepcopy


def clean_dict(d_in: dict) -> dict:
    """Converts OrderedDict to a new dict which has keynames normalized by removing @ character from it."""
    d_out = {}
    for k, v in d_in.items():
        new_k = k
        new_v = deepcopy(v)

        if k.startswith('@'):
            new_k = k[1:]

        if isinstance(v, (dict, OrderedDict)):
            new_v = clean_dict(new_v)

        d_out[new_k] = new_v

    return d_out


def format_sfp_str(s_in: str) -> str:
    """Make nmap service fingerprint string more readable."""
    return s_in.replace('\\x20',
                        ' ').replace('\\x04',
                                     '\t').replace('\\.',
                                                   '.').replace('%r', '\n')


class NMapParser:
    def parse(self, xml_str: str) -> dict:
        result = {}
        r = xmltodict.parse(xml_str)

        result['address'] = clean_dict(r['nmaprun']['host']['address'])

        hostnames = []
        for hn in r['nmaprun']['host']['hostnames']['hostname']:
            hostnames.append(clean_dict(hn))

        result['hostnames'] = hostnames

        ports = []
        for p_dict in r['nmaprun']['host']['ports']['port']:
            # if we have service fingerprint string, clean it.
            if 'service' in p_dict and '@servicefp' in p_dict['service']:
                p_dict['service']['@servicefp'] = format_sfp_str(
                    p_dict['service']['@servicefp'])

            ports.append(clean_dict(p_dict))

        result['ports'] = ports

        return result
